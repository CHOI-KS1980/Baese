name: 🍕 배민 G라이더 미션 자동화

on:
  schedule:
    # === 한국시간(KST) 기준 스케줄링 ===
    # KST = UTC + 9시간이므로 UTC 시간은 -9시간으로 설정
    
    # 🌅 아침 첫 메시지 09:00 KST (00:00 UTC)
    - cron: '0 0 * * *'
    
    # 📊 기본 30분 간격: 09:30~23:30 KST (00:30~14:30 UTC)
    - cron: '30 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14 * * *'
    
    # 🔥 평일 피크시간 15분 간격 추가
    # 아침점심피크: 06:00~13:00 KST = 21:00(전날)~04:00 UTC
    - cron: '15,45 21,22,23 * * 0-4'  # 전날 저녁 21-23시 (월-금)
    - cron: '15,45 0,1,2,3 * * 1-5'   # 당일 새벽 0-3시 (화-토)
    
    # 저녁피크: 17:00~20:00 KST = 08:00~11:00 UTC
    - cron: '15,45 8,9,10 * * 1-5'    # 오전 8-10시 (월-금)
    
    # 🎉 휴일 피크시간 15분 간격 추가 (토,일)
    # 아침점심피크: 06:00~14:00 KST = 21:00(전날)~05:00 UTC
    - cron: '15,45 21,22,23 * * 5,6'  # 금토 저녁 (토일 준비)
    - cron: '15,45 0,1,2,3,4 * * 0,6' # 일월 새벽 (일토 시간)
    
    # 휴일 저녁피크: 17:00~20:00 KST = 08:00~11:00 UTC  
    - cron: '15,45 8,9,10 * * 0,6'    # 토일 오전 8-10시
    
    # 🌙 마무리 메시지: 자정 00:00 KST = 15:00 UTC (전날)
    - cron: '0 15 * * *'
  
  # 수동 실행 지원
  workflow_dispatch:
    inputs:
      message_type:
        description: '전송할 메시지 타입'
        required: false
        default: 'manual'
        type: choice
        options:
        - manual
        - test
        - emergency
        - status_check

jobs:
  send-baemin-grider-mission:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 🛒 저장소 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 환경 설정  
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 python-dotenv pytz schedule holidays
    
    - name: 🕐 실행 시간 정보
      run: |
        echo "🚀 배민 G라이더 자동화 시작"
        echo "⏰ UTC 시간: $(date -u)"
        echo "🇰🇷 한국 시간 (KST): $(TZ='Asia/Seoul' date)"
        echo "🎯 실행 타입: ${{ github.event.inputs.message_type || 'scheduled' }}"
        echo "🔄 트리거: ${{ github.event_name }}"
    
    - name: 🍕 배민 G라이더 미션 전송
      env:
        # 카카오 i 오픈빌더 연동
        KAKAO_ACCESS_TOKEN: ${{ secrets.KAKAO_ACCESS_TOKEN }}
        KAKAO_OPENCHAT_ID: ${{ secrets.KAKAO_OPENCHAT_ID }}
        KAKAO_OPENBUILDER_WEBHOOK: ${{ secrets.KAKAO_OPENBUILDER_WEBHOOK }}
        
        # 한국 공휴일 API
        KOREA_HOLIDAY_API_KEY: ${{ secrets.KOREA_HOLIDAY_API_KEY }}
        
        # 웹훅 시스템 (이중화)
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        FALLBACK_WEBHOOK_URL: ${{ secrets.FALLBACK_WEBHOOK_URL }}
        
        # 날씨 정보 (선택사항)
        WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
        
        # 디버그 모드
        DEBUG_MODE: ${{ github.event.inputs.message_type == 'test' && 'true' || 'false' }}
      run: |
        echo "🎯 배민 G라이더 미션 자동 전송 시작..."
        echo "🔑 API 키 확인:"
        echo "  - 카카오 토큰: ${KAKAO_ACCESS_TOKEN:0:10}..."
        echo "  - 공휴일 API: ${KOREA_HOLIDAY_API_KEY:0:10}..."
        echo "  - 날씨 API: ${WEATHER_API_KEY:0:10}..."
        
        python github_actions_sender.py
        
        echo "✅ 배민 G라이더 미션 전송 완료!"
    
    - name: 📊 실행 결과 요약
      if: always()
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🍕 배민 G라이더 자동화 실행 완료"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "⏰ 완료 시간 (UTC): $(date -u)"
        echo "🇰🇷 완료 시간 (KST): $(TZ='Asia/Seoul' date)"
        echo "🎯 워크플로우: ${{ github.workflow }}"
        echo "🔄 실행 결과: ${{ job.status }}"
        echo "📝 커밋 해시: ${{ github.sha }}"
        echo "🌐 저장소: ${{ github.repository }}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "✅ 모든 작업이 성공적으로 완료되었습니다!"
          echo "📱 카카오톡 메시지가 전송되었습니다."
        else
          echo "❌ 일부 작업에서 오류가 발생했습니다."
          echo "🔍 로그를 확인하여 문제를 해결하세요."
        fi

  # 실패 알림 시스템
  notify-on-failure:
    runs-on: ubuntu-latest
    needs: send-baemin-grider-mission
    if: failure()
    
    steps:
    - name: 🚨 자동화 실패 알림
      run: |
        echo "❌ 배민 G라이더 자동화 실패!"
        echo "⏰ 실패 시간 (KST): $(TZ='Asia/Seoul' date)"
        echo "🔍 GitHub Actions 로그를 확인하여 문제를 해결하세요."
        echo "📧 필요시 시스템 관리자에게 알림을 발송하세요." 