name: 심플 배민 플러스 24시간 자동화

on:
  schedule:
    # === 한국시간(KST) 기준 완전한 30분 간격 스케줄 ===
    # KST = UTC + 9시간이므로 UTC 시간은 -9시간으로 설정
    
    # 🌅 하루 시작 (한국시간 10:00 = UTC 01:00)
    - cron: '0 1 * * *'
    
    # 📊 30분 (한국시간 10:30~23:30 = UTC 01:30~14:30)
    - cron: '30 1,2,3,4,5,6,7,8,9,10,11,12,13,14 * * *'
    
    # 📊 정시 (한국시간 11:00~23:00 = UTC 02:00~14:00)
    - cron: '0 2,3,4,5,6,7,8,9,10,11,12,13,14 * * *'
    
    # 🌙 하루 마무리 (한국시간 00:00 = UTC 15:00 전날)
    - cron: '0 15 * * *'
    
  workflow_dispatch: # 수동 실행 가능

jobs:
  send-grider-report:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    if: github.repository == github.event.repository.full_name
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Python 3.11 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        cd semiauto
        pip install -r config/requirements.txt
        
    - name: Chrome 설치
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: ChromeDriver 설치
      run: |
        # Chrome for Testing API를 사용한 최신 ChromeDriver 설치
        CHROME_VERSION=$(google-chrome --version | cut -d " " -f3)
        CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE")
        wget -O /tmp/chromedriver-linux64.zip "https://storage.googleapis.com/chrome-for-testing-public/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip"
        sudo unzip /tmp/chromedriver-linux64.zip -d /tmp/
        sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
    - name: 설정 파일 생성
      run: |
        cd semiauto
        echo "REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}" > config.txt
        echo "REFRESH_TOKEN=${{ secrets.KAKAO_REFRESH_TOKEN }}" >> config.txt
        echo "GRIDER_ID=${{ secrets.GRIDER_ID }}" >> config.txt
        echo "GRIDER_PASSWORD=${{ secrets.GRIDER_PASSWORD }}" >> config.txt
        
    - name: 심플 배민 플러스 리포트 전송
      run: |
        cd semiauto
        python core/final_solution.py --single-run
        
    - name: 로그 업로드 (실패시)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-logs
        path: semiauto/grider_automation.log 