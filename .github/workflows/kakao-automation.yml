name: 🤖 카카오톡 나에게 보내기 자동화

on:
  # 스케줄 실행 (UTC 기준) - 10:00~00:00 운영시간
  schedule:
    # 오전 10시 시작 메시지 (한국시간 10:00 = UTC 01:00)
    - cron: '0 1 * * *'   # 10:00 시작 알림
    
    # 30분 간격 기본 알림 (10:30~23:30, 논피크 시간)
    - cron: '30 1 * * *'  # 10:30
    - cron: '0 2 * * *'   # 11:00
    - cron: '0 3 * * *'   # 12:00
    - cron: '30 3 * * *'  # 12:30
    - cron: '0 4 * * *'   # 13:00
    - cron: '30 4 * * *'  # 13:30
    - cron: '0 5 * * *'   # 14:00
    - cron: '30 5 * * *'  # 14:30
    - cron: '0 6 * * *'   # 15:00
    - cron: '30 6 * * *'  # 15:30
    - cron: '0 7 * * *'   # 16:00
    - cron: '30 7 * * *'  # 16:30
    - cron: '0 8 * * *'   # 17:00
    - cron: '30 8 * * *'  # 17:30
    - cron: '0 9 * * *'   # 18:00
    - cron: '30 9 * * *'  # 18:30
    - cron: '0 10 * * *'  # 19:00
    - cron: '30 10 * * *' # 19:30
    - cron: '0 11 * * *'  # 20:00
    - cron: '30 11 * * *' # 20:30
    - cron: '0 12 * * *'  # 21:00
    - cron: '30 12 * * *' # 21:30
    - cron: '0 13 * * *'  # 22:00
    - cron: '30 13 * * *' # 22:30
    - cron: '0 14 * * *'  # 23:00
    - cron: '30 14 * * *' # 23:30
    
    # 피크시간 15분 간격 추가 알림 (11:30-14:00, 17:00-21:00)
    # 점심피크 (11:30-14:00)
    - cron: '45 2 * * *'  # 11:45
    - cron: '15 3 * * *'  # 12:15
    - cron: '45 3 * * *'  # 12:45
    - cron: '15 4 * * *'  # 13:15
    - cron: '45 4 * * *'  # 13:45
    
    # 저녁피크 (17:00-21:00)
    - cron: '15 8 * * *'  # 17:15
    - cron: '45 8 * * *'  # 17:45
    - cron: '15 9 * * *'  # 18:15
    - cron: '45 9 * * *'  # 18:45
    - cron: '15 10 * * *' # 19:15
    - cron: '45 10 * * *' # 19:45
    - cron: '15 11 * * *' # 20:15
    - cron: '45 11 * * *' # 20:45
    
    # 자정 마무리 메시지 (한국시간 00:00 = UTC 15:00)
    - cron: '0 15 * * *'  # 00:00 자정 마무리
  
  # 수동 실행 (테스트용)
  workflow_dispatch:
    inputs:
      report_type:
        description: '리포트 타입'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - start_day
        - regular
        - lunch_peak
        - dinner_peak
        - midnight

  # 푸시시 테스트 실행 (main 브랜치)
  push:
    branches: [ main ]
    paths: 
      - 'github_actions_memo_automation.py'
      - '.github/workflows/kakao-automation.yml'

jobs:
  send-kakao-message:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 패키지 설치
      run: |
        python -m pip install --upgrade pip
        pip install requests pytz
        # 선택적 패키지 (오류 무시)
        pip install python-dotenv || true
    
    - name: 🕐 한국시간 확인
      run: |
        echo "Current UTC time: $(date -u)"
        echo "Current KST time: $(TZ=Asia/Seoul date)"
        python -c "
        import pytz
        from datetime import datetime
        kst = pytz.timezone('Asia/Seoul')
        now_kst = datetime.now(kst)
        print(f'Python KST time: {now_kst.strftime(\"%Y-%m-%d %H:%M:%S %Z\")}')
        print(f'Hour: {now_kst.hour}')
        "
    
    - name: 🤖 리포트 타입 결정
      id: report-type
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          REPORT_TYPE="${{ github.event.inputs.report_type }}"
        elif [ "${{ github.event_name }}" = "push" ]; then
          REPORT_TYPE="test"
        else
          # 스케줄 실행시 시간과 분에 따라 결정
          HOUR=$(TZ=Asia/Seoul date +%H)
          MINUTE=$(TZ=Asia/Seoul date +%M)
          
          case $HOUR in
            10)
              if [ "$MINUTE" = "00" ]; then
                REPORT_TYPE="start_day"  # 하루 시작 메시지
              else
                REPORT_TYPE="regular"    # 일반 업데이트
              fi
              ;;
            00)
              REPORT_TYPE="midnight"     # 자정 마무리 메시지
              ;;
            11|12|13)
              # 점심피크 시간 (11:30-14:00)
              REPORT_TYPE="lunch_peak"
              ;;
            17|18|19|20)
              # 저녁피크 시간 (17:00-21:00)  
              REPORT_TYPE="dinner_peak"
              ;;
            *)
              # 논피크 시간 (30분 간격)
              REPORT_TYPE="regular"
              ;;
          esac
        fi
        
        echo "REPORT_TYPE=$REPORT_TYPE" >> $GITHUB_OUTPUT
        echo "🎯 결정된 리포트 타입: $REPORT_TYPE (한국시간: $(TZ=Asia/Seoul date +%H:%M))"
    
    - name: 📊 카카오톡 자동화 실행
      env:
        KAKAO_ACCESS_TOKEN: ${{ secrets.KAKAO_ACCESS_TOKEN }}
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        REPORT_TYPE: ${{ steps.report-type.outputs.REPORT_TYPE }}
      run: |
        echo "🚀 GitHub Actions 카카오톡 자동화 실행"
        echo "📋 리포트 타입: $REPORT_TYPE"
        echo "🔑 토큰 확인: ${KAKAO_ACCESS_TOKEN:0:10}..."
        
        python github_actions_memo_automation.py $REPORT_TYPE
    
    - name: 📈 실행 결과 기록
      if: always()
      run: |
        echo "::notice::카카오톡 자동화 실행 완료 - 타입: ${{ steps.report-type.outputs.REPORT_TYPE }}"
        
        if [ $? -eq 0 ]; then
          echo "::notice::✅ 전송 성공"
        else
          echo "::error::❌ 전송 실패"
        fi
    
    - name: 🚨 실패시 이슈 생성
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 카카오톡 자동화 실패 - ${new Date().toISOString().slice(0,10)}`,
            body: `## 🚨 자동화 실패 알림
            
            **실행 시간**: ${new Date().toLocaleString('ko-KR', {timeZone: 'Asia/Seoul'})}
            **리포트 타입**: ${{ steps.report-type.outputs.REPORT_TYPE }}
            **워크플로우**: ${{ github.workflow }}
            **실행 ID**: ${{ github.run_id }}
            
            ### 🔍 확인사항
            - [ ] KAKAO_ACCESS_TOKEN 만료 여부
            - [ ] API 사용량 초과 여부  
            - [ ] 네트워크 연결 상태
            - [ ] 스크립트 오류 로그
            
            ### 🔗 관련 링크
            - [실행 로그](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [워크플로우 파일](https://github.com/${{ github.repository }}/blob/main/.github/workflows/kakao-automation.yml)
            
            > 이 이슈는 자동으로 생성되었습니다. 문제 해결 후 이슈를 닫아주세요.`,
            labels: ['bug', 'automation', 'kakao']
          });
          
          console.log(`이슈 생성됨: ${issue.data.html_url}`);

  # 토큰 만료 체크 (주간)
  check-token:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 패키지 설치
      run: |
        pip install requests
    
    - name: 🔍 토큰 유효성 검사
      env:
        KAKAO_ACCESS_TOKEN: ${{ secrets.KAKAO_ACCESS_TOKEN }}
      run: |
        python -c "
        import requests
        import os
        
        token = os.getenv('KAKAO_ACCESS_TOKEN')
        if not token:
            print('❌ 토큰이 설정되지 않았습니다.')
            exit(1)
        
        # 카카오 사용자 정보 API로 토큰 유효성 확인
        url = 'https://kapi.kakao.com/v2/user/me'
        headers = {'Authorization': f'Bearer {token}'}
        
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            print('✅ 토큰이 유효합니다.')
        elif response.status_code == 401:
            print('⚠️ 토큰이 만료되었거나 무효합니다.')
            exit(1)
        else:
            print(f'⚠️ 토큰 확인 실패: {response.status_code}')
            exit(1)
        "
    
    - name: ⚠️ 토큰 만료 알림
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `⚠️ 카카오 토큰 만료 알림 - ${new Date().toISOString().slice(0,10)}`,
            body: `## ⚠️ 카카오 토큰 만료 알림
            
            **확인 시간**: ${new Date().toLocaleString('ko-KR', {timeZone: 'Asia/Seoul'})}
            
            ### 🔄 해결 방법
            1. \`카카오_토큰_생성기.py\` 실행
            2. 새 토큰 발급받기
            3. GitHub Secrets에서 \`KAKAO_ACCESS_TOKEN\` 업데이트
            
            ### 📋 설정 경로
            - Settings → Secrets and variables → Actions
            - \`KAKAO_ACCESS_TOKEN\` 값 업데이트
            
            > 토큰을 업데이트한 후 이 이슈를 닫아주세요.`,
            labels: ['maintenance', 'token', 'urgent']
          });

  # 통계 수집 (월간)
  monthly-stats:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 0 1 * *'  # 매월 1일
    
    steps:
    - name: 📊 월간 통계 수집
      run: |
        echo "📊 월간 자동화 통계를 수집합니다..."
        echo "이 기능은 향후 구현될 예정입니다." 