name: 🌟 차세대 G라이더 자동화 시스템

on:
  schedule:
    # 비피크시간: 정각, 30분 (UTC 기준이므로 한국시간 -9시간)
    - cron: '0,30 1-8,14 * * *'    # 한국시간 10:00, 10:30, 11:00, 11:30, 12:00, 12:30, 17:00, 17:30, 23:00, 23:30
    # 피크시간: 15분 간격
    - cron: '15,45 2-5,8-12 * * *' # 한국시간 11:15, 11:45, 12:15, 12:45, 17:15, 17:45, 18:00~21:45
    - cron: '0,15,30,45 2-5,8-12 * * *' # 피크시간 모든 15분 간격
  
  workflow_dispatch:
    inputs:
      mode:
        description: '실행 모드'
        required: false
        default: 'ultimate'
        type: choice
        options:
          - ultimate
          - ai_only
          - optimization
          - status_check
      priority:
        description: '우선순위'
        required: false
        default: 'normal'
        type: choice
        options:
          - normal
          - high
          - emergency

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  ultimate-automation:
    name: 🌟 차세대 자동화 실행
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 🐍 Python 환경 설정
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        check-latest: false
        cache: 'pip'
        cache-dependency-path: 'semiauto/requirements_minimal.txt'

    - name: 📦 의존성 설치
      run: |
        python -m pip install --upgrade pip --quiet
        pip install --prefer-binary -r semiauto/requirements_minimal.txt --quiet
        pip install psutil --quiet

    - name: 🚀 Chrome 최적화 설정
      run: |
        # Chrome이 이미 설치되어 있는지 확인
        if command -v google-chrome >/dev/null 2>&1; then
          echo "✅ Chrome 이미 설치됨: $(google-chrome --version)"
        else
          echo "🔄 Chrome 설치 중..."
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update -qq
          sudo apt-get install -y google-chrome-stable --quiet
        fi
        
        # ChromeDriver 다운로드
        CHROME_VERSION=$(google-chrome --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
        echo "🔍 Chrome 버전: $CHROME_VERSION"
        
        CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$CHROME_VERSION" 2>/dev/null || echo "119.0.6045.105")
        echo "📥 ChromeDriver 버전: $CHROMEDRIVER_VERSION"
        
        wget -q "https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
        unzip -q chromedriver-linux64.zip
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
        echo "✅ Chrome 설정 완료"

    - name: 🌟 차세대 시스템 실행
      env:
        KAKAO_REST_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}
        KAKAO_REFRESH_TOKEN: ${{ secrets.KAKAO_REFRESH_TOKEN }}
        REST_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}
        REFRESH_TOKEN: ${{ secrets.KAKAO_REFRESH_TOKEN }}
        GRIDER_ID: ${{ secrets.GRIDER_ID }}
        GRIDER_PASSWORD: ${{ secrets.GRIDER_PASSWORD }}
        KOREA_HOLIDAY_API_KEY: ${{ secrets.KOREA_HOLIDAY_API_KEY }}
        MODE: ${{ github.event.inputs.mode || 'ultimate' }}
        PRIORITY: ${{ github.event.inputs.priority || 'normal' }}
      run: |
        cd semiauto
        
        # 환경변수 검증 - 필수 정보가 없으면 실행 중단
        echo "🔍 필수 환경변수 검증 중..."
        
        if [ -z "$GRIDER_ID" ]; then
          echo "❌ GRIDER_ID가 설정되지 않았습니다!"
          echo "💡 GitHub 저장소 Settings → Secrets and variables → Actions에서 GRIDER_ID를 설정하세요"
          exit 1
        fi
        
        if [ -z "$GRIDER_PASSWORD" ]; then
          echo "❌ GRIDER_PASSWORD가 설정되지 않았습니다!"
          echo "💡 GitHub 저장소 Settings → Secrets and variables → Actions에서 GRIDER_PASSWORD를 설정하세요"
          exit 1
        fi
        
        if [ -z "$KAKAO_REST_API_KEY" ]; then
          echo "❌ KAKAO_REST_API_KEY가 설정되지 않았습니다!"
          echo "💡 GitHub 저장소 Settings → Secrets and variables → Actions에서 KAKAO_REST_API_KEY를 설정하세요"
          exit 1
        fi
        
        if [ -z "$KAKAO_REFRESH_TOKEN" ]; then
          echo "❌ KAKAO_REFRESH_TOKEN이 설정되지 않았습니다!"
          echo "💡 GitHub 저장소 Settings → Secrets and variables → Actions에서 KAKAO_REFRESH_TOKEN을 설정하세요"
          exit 1
        fi
        
        echo "✅ 모든 필수 환경변수가 설정되었습니다!"
        
        # 설정 파일 생성
        cat > config.txt << EOF
        REST_API_KEY=${KAKAO_REST_API_KEY}
        REFRESH_TOKEN=${KAKAO_REFRESH_TOKEN}
        GRIDER_ID=${GRIDER_ID}
        GRIDER_PASSWORD=${GRIDER_PASSWORD}
        KOREA_HOLIDAY_API_KEY=${KOREA_HOLIDAY_API_KEY}
        EOF
        
        echo "🌟 차세대 G라이더 자동화 시스템 시작 (날짜별 데이터 검증 강화)"
        echo "📅 실행 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "🇰🇷 한국시간: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "🎯 실행 모드: $MODE"
        echo "⚡ 우선순위: $PRIORITY"
        
        echo "🔍 환경변수 확인:"
        echo "  • GRIDER_ID: ${GRIDER_ID:+설정됨} (길이: ${#GRIDER_ID})"
        echo "  • GRIDER_PASSWORD: ${GRIDER_PASSWORD:+설정됨} (길이: ${#GRIDER_PASSWORD})"
        echo "  • KAKAO_REST_API_KEY: ${KAKAO_REST_API_KEY:+설정됨} (길이: ${#KAKAO_REST_API_KEY})"
        
        echo "🎯 G라이더 미션 시간 정책 확인:"
        echo "  • 미션 시간: 06:00 ~ 익일 03:00"
        KOREA_HOUR=$(TZ='Asia/Seoul' date '+%H')
        if [ $KOREA_HOUR -lt 6 ]; then
          echo "  • 현재 시간대: 00:00~05:59 → 전날 미션 데이터 조회"
        else
          echo "  • 현재 시간대: 06:00~23:59 → 당일 미션 데이터 조회"
        fi
        
        case "$MODE" in
          "ultimate")
            echo "🚀 최고급 통합 모드 실행"
            echo "🔍 상세 디버깅 모드 활성화..."
            python core/ultimate_grider_system.py --mode single
            ;;
          "ai_only")
            echo "🤖 AI 분석 전용 모드"
            python core/enhanced_final_solution.py --mode single --ai-only
            ;;
          "optimization")
            echo "🔧 최적화 엔진 전용 모드"
            python core/optimization_engine.py --analyze
            ;;
          "status_check")
            echo "📊 상태 체크 모드"
            python core/ultimate_grider_system.py --mode status
            ;;
          "date_validation")
            echo "🎯 날짜별 데이터 검증 강화 모드"
            python core/final_solution.py
            ;;
          "debug_mode")
            echo "🔍 전체 시스템 디버그 모드"
            python core/final_solution.py
            ;;
          *)
            echo "🚀 기본 통합 모드 실행"
            python core/ultimate_grider_system.py --mode normal
            ;;
        esac
        
        # 크롤링 결과 상세 분석
        echo "🔍 크롤링 결과 상세 분석"
        echo "================================"
        
        # 디버그 파일 확인
        if [ -f "debug_grider_page.html" ]; then
          echo "✅ 성공한 크롤링 페이지 발견"
          echo "📄 파일 크기: $(ls -lh debug_grider_page.html | awk '{print $5}')"
          echo "📊 HTML 내용 미리보기:"
          head -n 20 debug_grider_page.html | grep -E "(title|login|error|alert)" || echo "   특별한 내용 없음"
        else
          echo "❌ 성공한 크롤링 페이지 없음"
        fi
        
        # 실패한 크롤링 파일들 확인
        for file in debug_failed_page_*.html; do
          if [ -f "$file" ]; then
            echo "⚠️ 실패한 크롤링 페이지: $file"
            echo "📄 파일 크기: $(ls -lh "$file" | awk '{print $5}')"
            echo "📊 실패 원인 분석:"
            if grep -q "login" "$file"; then
              echo "   🔐 로그인 페이지 감지됨"
            fi
            if grep -q "error" "$file"; then
              echo "   ❌ 에러 메시지 발견"
              grep -i "error" "$file" | head -n 3
            fi
            if grep -q "captcha" "$file"; then
              echo "   🤖 캡차 감지됨"
            fi
            if grep -q "block" "$file"; then
              echo "   🚫 접근 차단 감지됨"
            fi
          fi
        done
        
        # 로그 파일 상세 분석
        if [ -f "grider_automation.log" ]; then
          echo "📄 크롤링 관련 로그 분석:"
          echo "🔍 마지막 크롤링 시도:"
          grep -A 5 -B 5 "크롤링" grider_automation.log | tail -n 20
          
          echo "🔍 에러 메시지:"
          grep -i "error\|실패\|오류" grider_automation.log | tail -n 10
          
          echo "🔍 로그인 관련:"
          grep -i "login\|로그인" grider_automation.log | tail -n 5
        fi

    - name: 🌐 대시보드 데이터 업데이트
      if: success()
      run: |
        cd semiauto
        echo "🌐 대시보드 데이터 업데이트 시작"
        
        # 실제 G라이더 데이터로 대시보드 강제 업데이트
        echo "🔄 실제 G라이더 데이터로 대시보드 업데이트 중..."
        python update_dashboard_with_real_data.py || echo "⚠️ 대시보드 업데이트 스크립트 실행 실패"
        
        # 대시보드 API 데이터가 생성되었는지 확인
        if [ -f "dashboard/api/latest-data.json" ]; then
          echo "✅ 대시보드 데이터 발견됨"
          
          # 실제 데이터인지 확인 (테스트 데이터가 아닌지)
          python -c "
          import json
          try:
              with open('dashboard/api/latest-data.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              riders = data.get('riders', [])
              test_names = ['김철수', '이영희', '박민수', '정수진']
              real_data = True
              
              if len(riders) > 0:
                  for rider in riders[:4]:
                      if rider.get('name', '') in test_names:
                          real_data = False
                          break
              
              if real_data:
                  print('✅ 실제 G라이더 데이터 확인됨')
                  print('📊 총점: {}점'.format(data.get('총점', 0)))
                  print('🏍️ 라이더: {}명'.format(len(riders)))
                  if len(riders) > 0:
                      top_rider = max(riders, key=lambda x: x.get('complete', 0))
                      print('🏆 TOP 라이더: {} ({}건)'.format(top_rider.get('name', '이름없음'), top_rider.get('complete', 0)))
              else:
                  print('⚠️ 테스트 데이터 감지됨 - 실제 데이터로 재시도 필요')
                  exit(1)
                  
          except Exception as e:
              print('❌ 데이터 검증 실패: {}'.format(str(e)))
              exit(1)
          "
          
          # Git 설정
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 대시보드 데이터 커밋
          git add dashboard/api/
          
          if ! git diff --staged --quiet; then
            git commit -m "🌐 실시간 대시보드 데이터 업데이트

            📊 자동 업데이트: $(date '+%Y-%m-%d %H:%M:%S %Z')
            🎯 실행 모드: ${{ env.MODE }}
            ⚡ 우선순위: ${{ env.PRIORITY }}
            
            - 실시간 성과 데이터 갱신
            - 실제 G라이더 크롤링 데이터 반영
            - 차트 데이터 업데이트
            - 메시지 설정 동기화"
            
            git push
            echo "✅ 대시보드 데이터 푸시 완료"
          else
            echo "ℹ️ 대시보드 데이터 변경사항 없음"
          fi
        else
          echo "⚠️ 대시보드 데이터 파일이 생성되지 않았습니다"
          echo "🔄 수동으로 대시보드 업데이트 재시도..."
          python update_dashboard_with_real_data.py || echo "❌ 수동 업데이트도 실패"
        fi

    - name: 📊 실행 결과 분석
      if: always()
      run: |
        cd semiauto
        echo "📊 실행 결과 분석"
        
        # 로그 파일 확인
        if [ -f "grider_automation.log" ]; then
          echo "📄 실행 로그 마지막 10줄:"
          tail -n 10 grider_automation.log
        fi
        
        if [ -f "ultimate_grider.log" ]; then
          echo "🌟 차세대 시스템 로그 마지막 10줄:"
          tail -n 10 ultimate_grider.log
        fi
        
        # 메시지 히스토리 확인
        if [ -f "message_history.json" ]; then
          echo "📨 메시지 히스토리 상태:"
          python -c "
        import json
        try:
            with open('message_history.json', 'r') as f:
                data = json.load(f)
                total_sent = len(data.get('sent_messages', {}))
                total_failed = len(data.get('failed_messages', {}))
                print(f'✅ 전송 성공: {total_sent}개')
                print(f'❌ 전송 실패: {total_failed}개')
                if total_sent > 0:
                    latest = max(data['sent_messages'].items(), key=lambda x: x[0])
                    print(f'📅 마지막 전송: {latest[0]}')
        except Exception as e:
            print(f'❌ 히스토리 분석 실패: {e}')
        "
        fi
        
        # AI 분석 데이터 확인
        if [ -f "ai_analytics_data.json" ]; then
          echo "🤖 AI 분석 데이터 상태:"
          python -c "
        import json
        try:
            with open('ai_analytics_data.json', 'r') as f:
                data = json.load(f)
                history_count = len(data.get('performance_history', []))
                print(f'📊 성과 히스토리: {history_count}개 데이터')
                if history_count > 0:
                    latest = data['performance_history'][-1]
                    print(f'📈 최근 완료율: {latest.get(\"mission_completion_rate\", 0):.1f}%')
                    print(f'🎯 이상 점수: {latest.get(\"anomaly_score\", 0):.2f}')
        except Exception as e:
            print(f'❌ AI 데이터 분석 실패: {e}')
        "
        fi
        
        # 대시보드 데이터 상태 확인
        if [ -f "dashboard/api/latest-data.json" ]; then
          echo "🌐 대시보드 데이터 상태:"
          python -c "
        import json
        try:
            with open('dashboard/api/latest-data.json', 'r') as f:
                data = json.load(f)
                print(f'📊 현재 점수: {data.get(\"current_score\", 0)}점')
                print(f'✅ 완료 미션: {data.get(\"completed_missions\", 0)}개')
                print(f'🏍️ 활성 라이더: {data.get(\"active_riders\", 0)}명')
                print(f'💰 예상 수익: {data.get(\"estimated_income\", 0):,}원')
                print(f'📅 업데이트: {data.get(\"timestamp\", \"알 수 없음\")}')
        except Exception as e:
            print(f'❌ 대시보드 데이터 분석 실패: {e}')
        "
        fi

    - name: 📁 아티팩트 업로드
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ultimate-system-logs-${{ github.run_number }}
        path: |
          semiauto/*.log
          semiauto/*_history.json
          semiauto/*_data.json
          semiauto/*_cache.json
          semiauto/dashboard/api/*.json
        retention-days: 7

  performance-monitoring:
    name: 📈 성능 모니터링
    runs-on: ubuntu-latest
    needs: ultimate-automation
    if: always()
    
    steps:
    - name: 📥 아티팩트 다운로드
      uses: actions/download-artifact@v4
      with:
        name: ultimate-system-logs-${{ github.run_number }}
        path: ./logs

    - name: 📊 성능 분석 리포트
      run: |
        echo "📈 차세대 G라이더 시스템 성능 분석"
        echo "=" $(printf '=%.0s' {1..50})
        
        # 실행 성공/실패 판정
        if [ "${{ needs.ultimate-automation.result }}" == "success" ]; then
          echo "✅ 실행 상태: 성공"
          echo "🎉 모든 컴포넌트가 정상 작동했습니다."
        else
          echo "❌ 실행 상태: 실패"
          echo "🔍 로그를 확인하여 문제점을 파악해주세요."
        fi
        
        echo ""
        echo "📊 시스템 구성 요소:"
        echo "  🤖 AI 기반 성과 예측 및 이상 감지"
        echo "  🔍 실시간 데이터 검증 및 자동 수정"
        echo "  📅 정확한 시간 기반 스케줄링"
        echo "  🔄 누락 메시지 자동 복구"
        echo "  📈 성능 모니터링 및 최적화"
        echo "  🌐 실시간 웹 대시보드"
        echo "  🌟 차세대 통합 관리"
        
        echo ""
        echo "🔗 모니터링 대시보드: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        echo "📁 로그 아티팩트: ultimate-system-logs-${{ github.run_number }}"

  health-check:
    name: 🏥 시스템 헬스 체크
    runs-on: ubuntu-latest
    needs: ultimate-automation
    if: failure()
    
    steps:
    - name: 🚨 시스템 장애 알림
      run: |
        echo "🚨 차세대 G라이더 시스템 장애 감지!"
        echo ""
        echo "🔍 장애 정보:"
        echo "  • 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "  • 워크플로우: ${{ github.workflow }}"
        echo "  • 실행 번호: ${{ github.run_number }}"
        echo "  • 트리거: ${{ github.event_name }}"
        
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "  • 수동 실행 모드: ${{ github.event.inputs.mode }}"
          echo "  • 우선순위: ${{ github.event.inputs.priority }}"
        fi
        
        echo ""
        echo "🛠️ 복구 방법:"
        echo "  1. Actions 탭에서 로그 확인"
        echo "  2. 아티팩트에서 상세 로그 다운로드"
        echo "  3. 필요시 수동으로 workflow_dispatch 실행"
        echo "  4. 대시보드에서 실시간 상태 확인" 