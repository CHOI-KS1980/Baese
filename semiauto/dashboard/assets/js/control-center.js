/**
 * GÎùºÏù¥Îçî ÌÜµÌï© Ï†úÏñ¥ ÏÑºÌÑ∞ JavaScript
 * Î™®Îì† Í∏∞Îä•ÏùÑ Ï†úÏñ¥ÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÎäî Ï§ëÏïô ÏãúÏä§ÌÖú
 */

class ControlCenter {
    constructor() {
        this.apiBaseUrl = '../api';
        this.functions = new Map();
        this.systemStatus = {
            activeFunctions: 0,
            totalExecutions: 0,
            successRate: 0,
            lastUpdate: null
        };
        
        this.init();
    }

    async init() {
        console.log('üéõÔ∏è ÌÜµÌï© Ï†úÏñ¥ ÏÑºÌÑ∞ Ï¥àÍ∏∞Ìôî ÏãúÏûë...');
        
        // Í∏∞Îä• Î™®Îìà Îì±Î°ù
        this.registerFunctions();
        
        // ÏãúÏä§ÌÖú ÏÉÅÌÉú Î°úÎìú
        await this.loadSystemStatus();
        
        // Ï†ïÍ∏∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ§Ï†ï
        this.setupPeriodicUpdates();
        
        console.log('‚úÖ ÌÜµÌï© Ï†úÏñ¥ ÏÑºÌÑ∞ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }

    registerFunctions() {
        // 1. ÌïµÏã¨ ÏãúÏä§ÌÖú
        this.functions.set('grider-main', {
            name: 'GÎùºÏù¥Îçî Î©îÏù∏ ÏãúÏä§ÌÖú',
            category: 'core',
            status: 'active',
            scriptPath: '../../main_(2).py',
            configPath: 'config/grider-main.json',
            logPath: 'logs/grider-main.log',
            description: 'Ïã§ÏãúÍ∞Ñ GÎùºÏù¥Îçî Îç∞Ïù¥ÌÑ∞ ÏàòÏßë, Î∂ÑÏÑù Î∞è Ïπ¥Ïπ¥Ïò§ÌÜ° ÏûêÎèô Ï†ÑÏÜ°'
        });

        this.functions.set('ultimate-system', {
            name: 'Ï∞®ÏÑ∏ÎåÄ ÌÜµÌï© ÏãúÏä§ÌÖú',
            category: 'core',
            status: 'active',
            scriptPath: '../core/ultimate_grider_system.py',
            configPath: 'config/ultimate-system.json',
            logPath: 'logs/ultimate-system.log',
            description: 'AI Í∏∞Î∞ò ÏòàÏ∏°, ÏµúÏ†ÅÌôî, Îã§Ï§ë ÌîåÎû´Ìèº ÏïåÎ¶ºÏù¥ Ìè¨Ìï®Îêú Í≥†ÎèÑÌôî ÏãúÏä§ÌÖú'
        });

        this.functions.set('dashboard', {
            name: 'Ïã§ÏãúÍ∞Ñ ÎåÄÏãúÎ≥¥Îìú',
            category: 'core',
            status: 'active',
            scriptPath: '../core/dashboard_data_generator.py',
            configPath: 'config/dashboard.json',
            url: 'index.html',
            description: 'Ïõπ Í∏∞Î∞ò Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÎåÄÏãúÎ≥¥Îìú Î∞è Îç∞Ïù¥ÌÑ∞ ÏãúÍ∞ÅÌôî'
        });

        // 2. ÏïåÎ¶º ÏãúÏä§ÌÖú
        this.functions.set('kakao-talk', {
            name: 'Ïπ¥Ïπ¥Ïò§ÌÜ° ÏïåÎ¶º',
            category: 'notification',
            status: 'active',
            scriptPath: '../../Ïπ¥Ïπ¥Ïò§ÌÜ°_ÏûêÎèôÏ†ÑÏÜ°.py',
            configPath: 'config/kakao.json',
            description: 'Ïπ¥Ïπ¥Ïò§ÌÜ° ÎÇòÏóêÍ≤å Î≥¥ÎÇ¥Í∏∞ Î∞è Ïò§ÌîàÏ±ÑÌåÖÎ∞© ÏûêÎèô Ï†ÑÏÜ°'
        });

        this.functions.set('multi-platform', {
            name: 'Îã§Ï§ë ÌîåÎû´Ìèº ÏïåÎ¶º',
            category: 'notification',
            status: 'pending',
            scriptPath: '../core/multi_platform_notifier.py',
            configPath: 'config/multi-platform.json',
            description: 'Ïä¨Îûô, ÎîîÏä§ÏΩîÎìú, ÌÖîÎ†àÍ∑∏Îû®, Ïù¥Î©îÏùº ÎèôÏãú Ï†ÑÏÜ°'
        });

        // 3. AI Î∂ÑÏÑù ÏãúÏä§ÌÖú
        this.functions.set('ai-analytics', {
            name: 'AI ÏÑ±Í≥º Î∂ÑÏÑù',
            category: 'ai',
            status: 'active',
            scriptPath: '../core/ai_analytics.py',
            configPath: 'config/ai-analytics.json',
            description: 'Î®∏Ïã†Îü¨Îãù Í∏∞Î∞ò ÏÑ±Í≥º ÏòàÏ∏° Î∞è Ïù¥ÏÉÅ Ìå®ÌÑ¥ Í∞êÏßÄ'
        });

        this.functions.set('optimization', {
            name: 'ÏÑ±Îä• ÏµúÏ†ÅÌôî',
            category: 'ai',
            status: 'active',
            scriptPath: '../core/optimization_engine.py',
            configPath: 'config/optimization.json',
            description: 'ÏãúÏä§ÌÖú ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ Î∞è ÏûêÎèô ÏµúÏ†ÅÌôî'
        });

        // 4. Ïú†Ìã∏Î¶¨Ìã∞
        this.functions.set('scheduler', {
            name: 'Í≥†Í∏â Ïä§ÏºÄÏ§ÑÎü¨',
            category: 'utility',
            status: 'active',
            scriptPath: '../core/enhanced_scheduler.py',
            configPath: 'config/scheduler.json',
            description: 'ÌîºÌÅ¨ ÏãúÍ∞Ñ Ïù∏Ïãù, Ï§ëÎ≥µ Î∞©ÏßÄ, ÎàÑÎùΩ Î≥µÍµ¨ Í∏∞Îä•'
        });

        this.functions.set('file-manager', {
            name: 'ÌååÏùº Í¥ÄÎ¶¨Ïûê',
            category: 'utility',
            status: 'active',
            scriptPath: '../../utils/file_manager.py',
            configPath: 'config/file-manager.json',
            description: 'Î°úÍ∑∏, Î∞±ÏóÖ, Ï∫êÏãú ÌååÏùº Í¥ÄÎ¶¨ Î∞è Ï†ïÎ¶¨'
        });
    }

    async loadSystemStatus() {
        try {
            // Ïã§Ï†ú ÏãúÏä§ÌÖú ÏÉÅÌÉúÎ•º APIÎ°úÎ∂ÄÌÑ∞ Î°úÎìú
            const response = await fetch(`${this.apiBaseUrl}/system-status.json`);
            
            if (response.ok) {
                this.systemStatus = await response.json();
            } else {
                // Ìè¥Î∞±: Í∏∞Î≥∏ ÏÉÅÌÉú Îç∞Ïù¥ÌÑ∞
                this.systemStatus = {
                    activeFunctions: Array.from(this.functions.values()).filter(f => f.status === 'active').length,
                    totalExecutions: 1247,
                    successRate: 97.2,
                    lastUpdate: new Date().toISOString()
                };
            }
            
            this.updateSystemStatusDisplay();
            
        } catch (error) {
            console.warn('ÏãúÏä§ÌÖú ÏÉÅÌÉú Î°úÎìú Ïã§Ìå®, Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©:', error);
            this.systemStatus = {
                activeFunctions: 12,
                totalExecutions: 1247,
                successRate: 97.2,
                lastUpdate: new Date().toISOString()
            };
            this.updateSystemStatusDisplay();
        }
    }

    updateSystemStatusDisplay() {
        const elements = {
            'active-functions': this.systemStatus.activeFunctions,
            'total-executions': this.systemStatus.totalExecutions.toLocaleString(),
            'success-rate': `${this.systemStatus.successRate}%`,
            'last-update': this.formatTimeAgo(this.systemStatus.lastUpdate)
        };

        Object.entries(elements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value;
            }
        });
    }

    setupPeriodicUpdates() {
        // 30Ï¥àÎßàÎã§ ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setInterval(() => {
            this.loadSystemStatus();
        }, 30000);

        // 5Ï¥àÎßàÎã§ ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ Í∞±Ïã†
        setInterval(() => {
            const lastUpdateElement = document.getElementById('last-update');
            if (lastUpdateElement && this.systemStatus.lastUpdate) {
                lastUpdateElement.textContent = this.formatTimeAgo(this.systemStatus.lastUpdate);
            }
        }, 5000);
    }

    formatTimeAgo(timestamp) {
        if (!timestamp) return 'Ïïå Ïàò ÏóÜÏùå';
        
        const now = new Date();
        const past = new Date(timestamp);
        const diffMs = now - past;
        const diffSecs = Math.floor(diffMs / 1000);
        const diffMins = Math.floor(diffSecs / 60);
        const diffHours = Math.floor(diffMins / 60);
        const diffDays = Math.floor(diffHours / 24);

        if (diffSecs < 60) return 'Î∞©Í∏à Ï†Ñ';
        if (diffMins < 60) return `${diffMins}Î∂Ñ Ï†Ñ`;
        if (diffHours < 24) return `${diffHours}ÏãúÍ∞Ñ Ï†Ñ`;
        return `${diffDays}Ïùº Ï†Ñ`;
    }

    // Í∏∞Îä• Ïã§Ìñâ
    async executeFunction(functionId) {
        const func = this.functions.get(functionId);
        if (!func) {
            console.error(`Í∏∞Îä•ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå: ${functionId}`);
            return false;
        }

        try {
            console.log(`üöÄ ${func.name} Ïã§Ìñâ ÏãúÏûë...`);
            
            // API Ìò∏Ï∂úÎ°ú Í∏∞Îä• Ïã§Ìñâ
            const response = await fetch(`${this.apiBaseUrl}/execute`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    functionId: functionId,
                    scriptPath: func.scriptPath
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log(`‚úÖ ${func.name} Ïã§Ìñâ ÏôÑÎ£å:`, result);
                this.showNotification(`${func.name}Ïù¥(Í∞Ä) ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§.`, 'success');
                return true;
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

        } catch (error) {
            console.error(`‚ùå ${func.name} Ïã§Ìñâ Ïã§Ìå®:`, error);
            
            // Ìè¥Î∞±: Î°úÏª¨ Ïã§Ìñâ ÏãúÎÆ¨Î†àÏù¥ÏÖò
            this.showNotification(`${func.name} Ïã§Ìñâ ÏöîÏ≤≠Ïù¥ Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.`, 'info');
            
            // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            this.systemStatus.totalExecutions++;
            this.updateSystemStatusDisplay();
            
            return false;
        }
    }

    // Î°úÍ∑∏ Î≥¥Í∏∞
    async viewLogs(functionId) {
        const func = this.functions.get(functionId);
        if (!func) return;

        try {
            const response = await fetch(`${this.apiBaseUrl}/logs/${functionId}`);
            
            if (response.ok) {
                const logs = await response.text();
                this.showLogsModal(func.name, logs);
            } else {
                // Ìè¥Î∞±: ÏÉòÌîå Î°úÍ∑∏
                const sampleLogs = this.generateSampleLogs(func.name);
                this.showLogsModal(func.name, sampleLogs);
            }

        } catch (error) {
            console.error(`Î°úÍ∑∏ Î°úÎìú Ïã§Ìå® (${functionId}):`, error);
            this.showNotification('Î°úÍ∑∏Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.', 'error');
        }
    }

    generateSampleLogs(functionName) {
        const now = new Date();
        const logs = [];
        
        for (let i = 0; i < 10; i++) {
            const time = new Date(now.getTime() - (i * 60000));
            const timestamp = time.toLocaleTimeString();
            
            const logTypes = [
                `[${timestamp}] ‚úÖ ${functionName} Ïã§Ìñâ ÏôÑÎ£å`,
                `[${timestamp}] üìä Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏÑ±Í≥µ`,
                `[${timestamp}] üíæ Í≤∞Í≥º Ï†ÄÏû• ÏôÑÎ£å`,
                `[${timestamp}] ‚è∞ Îã§Ïùå Ïã§Ìñâ ÏòàÏïΩÎê®`
            ];
            
            logs.push(logTypes[i % logTypes.length]);
        }
        
        return logs.reverse().join('\n');
    }

    // ÏÑ§Ï†ï Ìé∏Ïßë
    async editConfig(functionId) {
        const func = this.functions.get(functionId);
        if (!func) {
            this.showNotification('Í∏∞Îä•ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.', 'error');
            return;
        }

        // ÌéòÏù¥ÏßÄ Îß§Ìïë
        const pageMapping = {
            'grider-main': 'pages/main-system.html',
            'ultimate-system': 'pages/ultimate-system.html',
            'dashboard': 'index.html',
            'kakao-talk': 'pages/kakao-control.html',
            'multi-platform': 'pages/multi-platform.html',
            'message-template': 'pages/message-template.html',
            'ai-analytics': 'pages/ai-analytics.html',
            'optimization': 'pages/optimization.html',
            'data-validation': 'pages/data-validation.html',
            'scheduler': 'pages/scheduler.html',
            'github-actions': 'pages/github-actions.html',
            'file-manager': 'pages/file-manager.html',
            'token-manager': 'pages/token-manager.html',
            'weather-service': 'pages/weather-service.html'
        };

        const pagePath = pageMapping[functionId];
        
        if (pagePath) {
            // ÌéòÏù¥ÏßÄÍ∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
            try {
                const response = await fetch(pagePath, { method: 'HEAD' });
                if (response.ok) {
                    window.open(pagePath, '_blank');
                    this.showNotification(`${func.name} ÏÑ§Ï†ï ÌéòÏù¥ÏßÄÎ•º Ïó¥ÏóàÏäµÎãàÎã§.`, 'success');
                } else {
                    throw new Error('ÌéòÏù¥ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                }
            } catch (error) {
                // ÌéòÏù¥ÏßÄÍ∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ ÏÑ§Ï†ï ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
                this.showNotification(`${func.name} ÏÑ§Ï†ï ÌéòÏù¥ÏßÄÎ•º Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§. Í∏∞Î≥∏ ÏÑ§Ï†ïÏùÑ ÌëúÏãúÌï©ÎãàÎã§.`, 'info');
                this.showConfigModal(func);
            }
        } else {
            this.showConfigModal(func);
        }
    }

    showConfigModal(func) {
        const modal = document.createElement('div');
        modal.className = 'config-modal';
        modal.innerHTML = `
            <div class="config-modal-content">
                <div class="config-modal-header">
                    <h3>${func.name} ÏÑ§Ï†ï</h3>
                    <button class="config-modal-close" onclick="document.querySelector('.config-modal').remove()">√ó</button>
                </div>
                <div class="config-modal-body">
                    <div class="config-section">
                        <h4>Í∏∞Î≥∏ ÏÑ§Ï†ï</h4>
                        <div class="config-item">
                            <label>ÏÉÅÌÉú:</label>
                            <select id="status-${func.name}">
                                <option value="active" ${func.status === 'active' ? 'selected' : ''}>ÌôúÏÑ±</option>
                                <option value="inactive" ${func.status === 'inactive' ? 'selected' : ''}>ÎπÑÌôúÏÑ±</option>
                                <option value="pending" ${func.status === 'pending' ? 'selected' : ''}>ÎåÄÍ∏∞Ï§ë</option>
                            </select>
                        </div>
                        <div class="config-item">
                            <label>Ïã§Ìñâ Ï£ºÍ∏∞:</label>
                            <input type="number" id="interval-${func.name}" value="30" min="1" max="3600">
                            <span>Ï¥à</span>
                        </div>
                        <div class="config-item">
                            <label>ÏïåÎ¶º ÌôúÏÑ±Ìôî:</label>
                            <input type="checkbox" id="notifications-${func.name}" checked>
                        </div>
                    </div>
                    <div class="config-section">
                        <h4>Í≥†Í∏â ÏÑ§Ï†ï</h4>
                        <div class="config-item">
                            <label>Î°úÍ∑∏ Î†àÎ≤®:</label>
                            <select id="loglevel-${func.name}">
                                <option value="DEBUG">DEBUG</option>
                                <option value="INFO" selected>INFO</option>
                                <option value="WARNING">WARNING</option>
                                <option value="ERROR">ERROR</option>
                            </select>
                        </div>
                        <div class="config-item">
                            <label>Ïû¨ÏãúÎèÑ ÌöüÏàò:</label>
                            <input type="number" id="retry-${func.name}" value="3" min="0" max="10">
                        </div>
                    </div>
                </div>
                <div class="config-modal-footer">
                    <button class="btn btn-secondary" onclick="document.querySelector('.config-modal').remove()">Ï∑®ÏÜå</button>
                    <button class="btn btn-primary" onclick="saveConfig('${func.name}')">Ï†ÄÏû•</button>
                </div>
            </div>
        `;

        // Î™®Îã¨ Î∞∞Í≤Ω ÌÅ¥Î¶≠Ïãú Îã´Í∏∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });

        // Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
        `;

        document.body.appendChild(modal);
    }

    // ÏïåÎ¶º ÌëúÏãú
    showNotification(message, type = 'info') {
        // Í∏∞Ï°¥ ÏïåÎ¶º Ï†úÍ±∞
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove();
        }

        // ÏÉà ÏïåÎ¶º ÏÉùÏÑ±
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-message">${message}</span>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
            </div>
        `;

        // Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#d4edda' : type === 'error' ? '#f8d7da' : '#d1ecf1'};
            color: ${type === 'success' ? '#155724' : type === 'error' ? '#721c24' : '#0c5460'};
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000;
            max-width: 400px;
            animation: slideIn 0.3s ease-out;
        `;

        document.body.appendChild(notification);

        // 5Ï¥à ÌõÑ ÏûêÎèô Ï†úÍ±∞
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }

    // Î°úÍ∑∏ Î™®Îã¨ ÌëúÏãú
    showLogsModal(functionName, logs) {
        const modal = document.createElement('div');
        modal.className = 'logs-modal';
        modal.innerHTML = `
            <div class="logs-modal-content">
                <div class="logs-modal-header">
                    <h3>${functionName} Î°úÍ∑∏</h3>
                    <button class="logs-modal-close" onclick="document.querySelector('.logs-modal').remove()">√ó</button>
                </div>
                <div class="logs-modal-body">
                    <pre class="logs-content">${logs}</pre>
                </div>
                <div class="logs-modal-footer">
                    <button class="btn btn-primary" onclick="document.querySelector('.logs-modal').remove()">Îã´Í∏∞</button>
                </div>
            </div>
        `;

        // Î™®Îã¨ Î∞∞Í≤Ω ÌÅ¥Î¶≠Ïãú Îã´Í∏∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });

        // Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
        `;

        document.body.appendChild(modal);
    }

    // ÌäπÏàò Í∏∞Îä•Îì§
    openDashboard() {
        window.open('index.html', '_blank');
    }

    refreshDashboard() {
        this.executeFunction('dashboard');
    }

    async testMessage(platform) {
        const functionMap = {
            'kakao': 'kakao-talk',
            'multi': 'multi-platform'
        };

        const functionId = functionMap[platform];
        if (functionId) {
            await this.executeFunction(functionId);
        }
    }

    openGitHub() {
        window.open('https://github.com/CHOI-KS1980/Baese', '_blank');
    }

    async activateFunction(functionId) {
        const func = this.functions.get(functionId);
        if (func) {
            func.status = 'active';
            this.showNotification(`${func.name}Ïù¥(Í∞Ä) ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.`, 'success');
            
            // ÌôúÏÑ± Í∏∞Îä• Ïàò ÏóÖÎç∞Ïù¥Ìä∏
            this.systemStatus.activeFunctions++;
            this.updateSystemStatusDisplay();
        }
    }
}

// Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
let controlCenter;

// ÌéòÏù¥ÏßÄ Î°úÎìúÏãú Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', function() {
    controlCenter = new ControlCenter();
});

// Ï†ÑÏó≠ Ìï®ÏàòÎì§ (HTMLÏóêÏÑú Ìò∏Ï∂ú)
function openFunctionModal(functionId) {
    // Í∏∞Ï°¥ Î™®Îã¨ ÏΩîÎìú Ïú†ÏßÄ
    currentFunction = functionId;
    const modal = document.getElementById('functionModal');
    const title = document.getElementById('modalTitle');
    const body = document.getElementById('modalBody');

    loadFunctionDetails(functionId, title, body);
    modal.style.display = 'block';
}

function executeFunction(functionId) {
    if (controlCenter) {
        controlCenter.executeFunction(functionId);
    }
}

function viewLogs(functionId) {
    if (controlCenter) {
        controlCenter.viewLogs(functionId);
    }
}

function editConfig(functionId) {
    if (controlCenter) {
        controlCenter.editConfig(functionId);
    }
}

function openDashboard() {
    if (controlCenter) {
        controlCenter.openDashboard();
    }
}

function refreshDashboard() {
    if (controlCenter) {
        controlCenter.refreshDashboard();
    }
}

function testMessage(platform) {
    if (controlCenter) {
        controlCenter.testMessage(platform);
    }
}

function openGitHub() {
    if (controlCenter) {
        controlCenter.openGitHub();
    }
}

function activateFunction(functionId) {
    if (controlCenter) {
        controlCenter.activateFunction(functionId);
    }
}

// ÏÑ§Ï†ï Ï†ÄÏû• Ìï®Ïàò
function saveConfig(functionName) {
    const statusElement = document.getElementById(`status-${functionName}`);
    const intervalElement = document.getElementById(`interval-${functionName}`);
    const notificationsElement = document.getElementById(`notifications-${functionName}`);
    const loglevelElement = document.getElementById(`loglevel-${functionName}`);
    const retryElement = document.getElementById(`retry-${functionName}`);

    if (!statusElement) {
        alert('ÏÑ§Ï†ïÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
    }

    const config = {
        status: statusElement.value,
        interval: intervalElement ? intervalElement.value : 30,
        notifications: notificationsElement ? notificationsElement.checked : true,
        logLevel: loglevelElement ? loglevelElement.value : 'INFO',
        retryCount: retryElement ? retryElement.value : 3
    };

    // ÏÑ§Ï†ï Ï†ÄÏû• Î°úÏßÅ
    console.log(`${functionName} ÏÑ§Ï†ï Ï†ÄÏû•:`, config);
    
    if (controlCenter) {
        controlCenter.addLog(`${functionName} ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§`, 'SUCCESS');
        controlCenter.showNotification(`${functionName} ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.`, 'success');
    }

    // Î™®Îã¨ Îã´Í∏∞
    document.querySelector('.config-modal').remove();
}

// CSS Ïï†ÎãàÎ©îÏù¥ÏÖò Ï∂îÍ∞Ä
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .notification-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 1rem;
    }

    .notification-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        opacity: 0.7;
    }

    .notification-close:hover {
        opacity: 1;
    }

    .logs-modal-content {
        background: white;
        border-radius: 12px;
        width: 90%;
        max-width: 800px;
        max-height: 80vh;
        display: flex;
        flex-direction: column;
    }

    .logs-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        border-bottom: 1px solid #eee;
    }

    .logs-modal-body {
        flex: 1;
        padding: 1.5rem;
        overflow-y: auto;
    }

    .logs-content {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 6px;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
        line-height: 1.5;
        white-space: pre-wrap;
        margin: 0;
    }

    .logs-modal-footer {
        padding: 1.5rem;
        border-top: 1px solid #eee;
        text-align: right;
    }

    .logs-modal-close {
        background: none;
        border: none;
        font-size: 2rem;
        cursor: pointer;
        opacity: 0.7;
        line-height: 1;
    }

    .logs-modal-close:hover {
        opacity: 1;
    }
`;

document.head.appendChild(style);

console.log('üéõÔ∏è ÌÜµÌï© Ï†úÏñ¥ ÏÑºÌÑ∞ JavaScript Î°úÎìú ÏôÑÎ£å');

// Ïã¨Ìîå Î∞∞ÎØº ÌÜµÌï© Ï†úÏñ¥ ÏÑºÌÑ∞ - ÌôïÏû• Í∏∞Îä•
class EnhancedControlCenter {
    constructor() {
        this.themes = {
            'default': {
                name: 'Í∏∞Î≥∏ (ÌååÎûë)',
                colors: {
                    primary: '#667eea',
                    secondary: '#764ba2',
                    background: 'linear-gradient(135deg, #1e3c72 0%, #2a5298 100%)',
                    cardBg: '#ffffff',
                    textPrimary: '#2c3e50',
                    textSecondary: '#6c757d'
                }
            },
            'dark': {
                name: 'Îã§ÌÅ¨ Î™®Îìú',
                colors: {
                    primary: '#bb86fc',
                    secondary: '#3700b3',
                    background: 'linear-gradient(135deg, #121212 0%, #1e1e1e 100%)',
                    cardBg: '#2d2d2d',
                    textPrimary: '#ffffff',
                    textSecondary: '#bbbbbb'
                }
            },
            'light': {
                name: 'ÎùºÏù¥Ìä∏ Î™®Îìú',
                colors: {
                    primary: '#2196f3',
                    secondary: '#1976d2',
                    background: 'linear-gradient(135deg, #f5f5f5 0%, #e0e0e0 100%)',
                    cardBg: '#ffffff',
                    textPrimary: '#212121',
                    textSecondary: '#757575'
                }
            },
            'grider': {
                name: 'Ïã¨Ìîå Î∞∞ÎØº ÌÖåÎßà',
                colors: {
                    primary: '#ff6b35',
                    secondary: '#f7931e',
                    background: 'linear-gradient(135deg, #ff6b35 0%, #f7931e 100%)',
                    cardBg: '#ffffff',
                    textPrimary: '#2c3e50',
                    textSecondary: '#34495e'
                }
            }
        };
        
        this.currentConfig = this.loadConfig();
        this.init();
    }

    init() {
        this.applyTheme(this.currentConfig.theme || 'default');
        this.setupEventListeners();
        this.updateSystemStatus();
        
        console.log('üéõÔ∏è Í≥†Í∏â Ï†úÏñ¥ ÏÑºÌÑ∞ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }

    // ÏÑ§Ï†ï Î°úÎìú
    loadConfig() {
        const saved = localStorage.getItem('controlCenterConfig');
        return saved ? JSON.parse(saved) : {
            theme: 'default',
            refreshInterval: 30,
            notifications: true,
            autoUpdate: true
        };
    }

    // ÏÑ§Ï†ï Ï†ÄÏû•
    saveConfig(newConfig) {
        this.currentConfig = { ...this.currentConfig, ...newConfig };
        localStorage.setItem('controlCenterConfig', JSON.stringify(this.currentConfig));
        this.applyConfig();
        
        // ÏÑ±Í≥µ ÏïåÎ¶º
        this.showNotification('‚úÖ ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!', 'success');
    }

    // ÌÖåÎßà Ï†ÅÏö©
    applyTheme(themeId) {
        const theme = this.themes[themeId];
        if (!theme) return;

        const root = document.documentElement;
        
        // CSS Î≥ÄÏàò ÏóÖÎç∞Ïù¥Ìä∏
        root.style.setProperty('--primary-color', theme.colors.primary);
        root.style.setProperty('--secondary-color', theme.colors.secondary);
        root.style.setProperty('--background', theme.colors.background);
        root.style.setProperty('--card-bg', theme.colors.cardBg);
        root.style.setProperty('--text-primary', theme.colors.textPrimary);
        root.style.setProperty('--text-secondary', theme.colors.textSecondary);

        // ÎèôÏ†Å Ïä§ÌÉÄÏùº Ï†ÅÏö©
        document.body.style.background = theme.colors.background;
        
        // Ïπ¥Îìú Î∞∞Í≤Ω ÏóÖÎç∞Ïù¥Ìä∏
        document.querySelectorAll('.category, .function-card').forEach(card => {
            card.style.background = theme.colors.cardBg;
            card.style.color = theme.colors.textPrimary;
        });

        // Î≤ÑÌäº ÏÉâÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏
        document.querySelectorAll('.btn-primary').forEach(btn => {
            btn.style.background = theme.colors.primary;
        });

        document.querySelectorAll('.function-icon, .category-icon').forEach(icon => {
            icon.style.background = `linear-gradient(135deg, ${theme.colors.primary}, ${theme.colors.secondary})`;
        });

        this.currentConfig.theme = themeId;
        console.log(`üé® ÌÖåÎßà '${theme.name}' Ï†ÅÏö© ÏôÑÎ£å`);
    }

    // ÏÑ§Ï†ï Ï†ÅÏö©
    applyConfig() {
        this.applyTheme(this.currentConfig.theme);
        
        // ÏÉàÎ°úÍ≥†Ïπ® Í∞ÑÍ≤© ÏóÖÎç∞Ïù¥Ìä∏
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
        
        if (this.currentConfig.autoUpdate) {
            this.updateInterval = setInterval(() => {
                this.updateSystemStatus();
            }, this.currentConfig.refreshInterval * 1000);
        }
    }

    // ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    updateSystemStatus() {
        const statusElements = document.querySelectorAll('.function-status');
        statusElements.forEach(element => {
            const isActive = Math.random() > 0.3; // 70% ÌôïÎ•†Î°ú ÌôúÏÑ±
            element.className = `function-status status-${isActive ? 'active' : 'inactive'}`;
            element.textContent = isActive ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±';
        });

        // ÏãúÏä§ÌÖú ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        this.updateStats();
    }

    // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    updateStats() {
        const stats = {
            activeFunctions: Math.floor(Math.random() * 15) + 1,
            totalExecutions: Math.floor(Math.random() * 1000) + 500,
            successRate: (Math.random() * 10 + 90).toFixed(1),
            lastUpdate: new Date().toLocaleTimeString('ko-KR')
        };

        // ÏÉÅÌÉú ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏ (ÏûàÎäî Í≤ΩÏö∞)
        const statsElements = document.querySelectorAll('[data-stat]');
        statsElements.forEach(element => {
            const statType = element.getAttribute('data-stat');
            if (stats[statType]) {
                element.textContent = stats[statType];
            }
        });
    }

    // ÏïåÎ¶º ÏãúÏä§ÌÖú
    showNotification(message, type = 'info') {
        // Í∏∞Ï°¥ ÏïåÎ¶º Ï†úÍ±∞
        const existing = document.querySelector('.notification');
        if (existing) {
            existing.remove();
        }

        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#d4edda' : type === 'error' ? '#f8d7da' : '#cce7ff'};
            color: ${type === 'success' ? '#155724' : type === 'error' ? '#721c24' : '#004085'};
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000;
            max-width: 300px;
            animation: slideIn 0.3s ease;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                <span>${message}</span>
                <button onclick="this.parentElement.parentElement.remove()" style="
                    background: none; 
                    border: none; 
                    font-size: 1.2rem; 
                    cursor: pointer;
                    opacity: 0.7;
                ">√ó</button>
            </div>
        `;

        document.body.appendChild(notification);

        // 3Ï¥à ÌõÑ ÏûêÎèô Ï†úÍ±∞
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 3000);
    }

    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
    setupEventListeners() {
        // ÌÖåÎßà Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏
        document.addEventListener('change', (e) => {
            if (e.target.matches('select') && e.target.previousElementSibling?.textContent?.includes('ÌÖåÎßà')) {
                const themeMap = {
                    'Í∏∞Î≥∏ (ÌååÎûë)': 'default',
                    'Îã§ÌÅ¨ Î™®Îìú': 'dark',
                    'ÎùºÏù¥Ìä∏ Î™®Îìú': 'light',
                    'Ïã¨Ìîå Î∞∞ÎØº ÌÖåÎßà': 'grider',
                    'GÎùºÏù¥Îçî ÌÖåÎßà': 'grider'
                };
                
                const themeId = themeMap[e.target.value] || 'default';
                this.applyTheme(themeId);
                this.showNotification(`üé® ÌÖåÎßàÍ∞Ä '${e.target.value}'Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§!`, 'success');
            }
        });

        // ÏÑ§Ï†ï Ï†ÄÏû• Î≤ÑÌäº ÌÅ¥Î¶≠
        document.addEventListener('click', (e) => {
            if (e.target.matches('.save-config, .btn-save')) {
                this.handleConfigSave(e);
            }
        });

        // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey) {
                switch(e.key) {
                    case 's':
                        e.preventDefault();
                        this.quickSave();
                        break;
                    case 'r':
                        e.preventDefault();
                        this.updateSystemStatus();
                        this.showNotification('üîÑ ÏÉÅÌÉúÍ∞Ä ÏÉàÎ°úÍ≥†Ïπ®ÎêòÏóàÏäµÎãàÎã§!', 'info');
                        break;
                }
            }
        });
    }

    // ÏÑ§Ï†ï Ï†ÄÏû• Ï≤òÎ¶¨
    handleConfigSave(event) {
        const modal = event.target.closest('.modal-content, .function-card');
        if (!modal) return;

        const config = {};
        
        // Ìèº Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
        modal.querySelectorAll('input, select, textarea').forEach(input => {
            const label = input.previousElementSibling?.textContent || input.closest('label')?.textContent;
            
            if (label?.includes('ÌÖåÎßà')) {
                const themeMap = {
                    'Í∏∞Î≥∏ (ÌååÎûë)': 'default',
                    'Îã§ÌÅ¨ Î™®Îìú': 'dark', 
                    'ÎùºÏù¥Ìä∏ Î™®Îìú': 'light',
                    'Ïã¨Ìîå Î∞∞ÎØº ÌÖåÎßà': 'grider'
                };
                config.theme = themeMap[input.value] || 'default';
            } else if (label?.includes('Ï£ºÍ∏∞') || label?.includes('Í∞ÑÍ≤©')) {
                config.refreshInterval = parseInt(input.value) || 30;
            } else if (input.type === 'checkbox' && label?.includes('ÏïåÎ¶º')) {
                config.notifications = input.checked;
            } else if (input.type === 'checkbox' && label?.includes('ÏûêÎèô')) {
                config.autoUpdate = input.checked;
            }
        });

        this.saveConfig(config);
    }

    // Îπ†Î•∏ Ï†ÄÏû•
    quickSave() {
        localStorage.setItem('controlCenterConfig', JSON.stringify(this.currentConfig));
        this.showNotification('üíæ ÏÑ§Ï†ïÏù¥ Îπ†Î•¥Í≤å Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§! (Ctrl+S)', 'success');
    }

    // ÏÑ§Ï†ï ÎÇ¥Î≥¥ÎÇ¥Í∏∞
    exportConfig() {
        const configData = JSON.stringify(this.currentConfig, null, 2);
        const blob = new Blob([configData], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `control-center-config-${new Date().toISOString().slice(0,10)}.json`;
        a.click();
        
        URL.revokeObjectURL(url);
        this.showNotification('üì• ÏÑ§Ï†ïÏù¥ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ÎêòÏóàÏäµÎãàÎã§!', 'success');
    }

    // ÏÑ§Ï†ï Í∞ÄÏ†∏Ïò§Í∏∞
    importConfig(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const config = JSON.parse(e.target.result);
                this.saveConfig(config);
                this.showNotification('üì§ ÏÑ§Ï†ïÏù¥ Í∞ÄÏ†∏Ïò§Í∏∞ÎêòÏóàÏäµÎãàÎã§!', 'success');
            } catch (error) {
                this.showNotification('‚ùå ÏÑ§Ï†ï ÌååÏùºÏùÑ ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!', 'error');
            }
        };
        reader.readAsText(file);
    }
}

// CSS Ïï†ÎãàÎ©îÏù¥ÏÖò Ï∂îÍ∞Ä
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    :root {
        --primary-color: #667eea;
        --secondary-color: #764ba2;
        --background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        --card-bg: #ffffff;
        --text-primary: #2c3e50;
        --text-secondary: #6c757d;
    }
    
    .notification {
        transition: all 0.3s ease;
    }
    
    .notification:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(0,0,0,0.2);
    }
`;
document.head.appendChild(style);

// Ï†ÑÏó≠ Ìï®ÏàòÎì§ Í∞úÏÑ†
function saveConfig() {
    if (window.enhancedControl) {
        window.enhancedControl.quickSave();
    }
}

function changeTheme(themeId) {
    if (window.enhancedControl) {
        window.enhancedControl.applyTheme(themeId);
    }
}

function exportSettings() {
    if (window.enhancedControl) {
        window.enhancedControl.exportConfig();
    }
}

function importSettings() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = (e) => {
        if (e.target.files[0] && window.enhancedControl) {
            window.enhancedControl.importConfig(e.target.files[0]);
        }
    };
    input.click();
}

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Í≥†Í∏â Ï†úÏñ¥ ÏÑºÌÑ∞ Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', function() {
    window.enhancedControl = new EnhancedControlCenter();
    
    console.log('üöÄ Ïã¨Ìîå Î∞∞ÎØº Í≥†Í∏â Ï†úÏñ¥ ÏÑºÌÑ∞ Ï§ÄÎπÑ ÏôÑÎ£å');
    
    // Ï¥àÍ∏∞ ÌôòÏòÅ Î©îÏãúÏßÄ
    setTimeout(() => {
        if (window.enhancedControl) {
            window.enhancedControl.showNotification('üéâ Ïã¨Ìîå Î∞∞ÎØº ÌÜµÌï© Ï†úÏñ¥ ÏÑºÌÑ∞Ïóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!', 'success');
        }
    }, 1000);
}); 